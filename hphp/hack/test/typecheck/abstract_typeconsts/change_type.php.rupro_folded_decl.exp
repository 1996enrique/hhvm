--- ocaml
+++ rupro
@@ -1,238 +1,254 @@
 FoldedClass {
     name: "\\A",
     pos: Pos(root|change_type.php, 4:16-17),
     kind: Cclass(
         Abstract,
     ),
     consts: {
         "T": ClassConst {
             is_synthesized: true,
             kind: CCAbstract(
                 true,
             ),
             pos: Pos(root|change_type.php, 5:23-24),
             ty: HH\TypeStructure<this::T>,
             origin: "\\A",
             refs: [],
         },
         "class": ClassConst {
             is_synthesized: true,
             kind: CCConcrete,
             pos: Pos(root|change_type.php, 4:16-17),
             ty: HH\classname<this>,
             origin: "\\A",
             refs: [],
         },
     },
     type_consts: {
         "T": TypeConst {
             is_synthesized: false,
             name: (
                 Pos(root|change_type.php, 5:23-24),
                 "T",
             ),
             kind: AbstractTypeconst {
                 as_constraint: Some(
                     num,
                 ),
                 super_constraint: None,
                 default: Some(
                     int,
                 ),
             },
             origin: "\\A",
             enforceable: None,
             reifiable: None,
             is_concretized: false,
             is_ctx: false,
         },
     },
 }
 FoldedClass {
     name: "\\AA",
     pos: Pos(root|change_type.php, 8:7-9),
     kind: Cclass(
         Concrete,
     ),
     substs: {
         "\\A": SubstContext {
             subst: Subst(
                 {},
             ),
             class_context: "\\AA",
             from_req_extends: false,
         },
     },
     ancestors: {
         "\\A": A,
     },
     consts: {
         "T": ClassConst {
             is_synthesized: true,
-            kind: CCConcrete,
+            kind: CCAbstract(
+                true,
+            ),
             pos: Pos(root|change_type.php, 5:23-24),
             ty: HH\TypeStructure<this::T>,
             origin: "\\A",
             refs: [],
         },
         "class": ClassConst {
             is_synthesized: true,
             kind: CCConcrete,
             pos: Pos(root|change_type.php, 8:7-9),
             ty: HH\classname<this>,
             origin: "\\AA",
             refs: [],
         },
     },
     type_consts: {
         "T": TypeConst {
             is_synthesized: false,
             name: (
                 Pos(root|change_type.php, 5:23-24),
                 "T",
             ),
-            kind: ConcreteTypeconst {
-                ty: int,
+            kind: AbstractTypeconst {
+                as_constraint: Some(
+                    num,
+                ),
+                super_constraint: None,
+                default: Some(
+                    int,
+                ),
             },
             origin: "\\A",
             enforceable: None,
             reifiable: None,
-            is_concretized: true,
+            is_concretized: false,
             is_ctx: false,
         },
     },
     extends: {
         "\\A",
     },
 }
 FoldedClass {
     name: "\\B",
     pos: Pos(root|change_type.php, 10:16-17),
     kind: Cclass(
         Abstract,
     ),
     substs: {
         "\\A": SubstContext {
             subst: Subst(
                 {},
             ),
             class_context: "\\B",
             from_req_extends: false,
         },
     },
     ancestors: {
         "\\A": A,
     },
     consts: {
         "T": ClassConst {
             is_synthesized: true,
             kind: CCAbstract(
                 true,
             ),
             pos: Pos(root|change_type.php, 11:23-24),
             ty: HH\TypeStructure<this::T>,
             origin: "\\B",
             refs: [],
         },
         "class": ClassConst {
             is_synthesized: true,
             kind: CCConcrete,
             pos: Pos(root|change_type.php, 10:16-17),
             ty: HH\classname<this>,
             origin: "\\B",
             refs: [],
         },
     },
     type_consts: {
         "T": TypeConst {
             is_synthesized: false,
             name: (
                 Pos(root|change_type.php, 11:23-24),
                 "T",
             ),
             kind: AbstractTypeconst {
                 as_constraint: Some(
                     num,
                 ),
                 super_constraint: None,
                 default: Some(
                     float,
                 ),
             },
             origin: "\\B",
             enforceable: None,
             reifiable: None,
             is_concretized: false,
             is_ctx: false,
         },
     },
     extends: {
         "\\A",
     },
 }
 FoldedClass {
     name: "\\BB",
     pos: Pos(root|change_type.php, 14:7-9),
     kind: Cclass(
         Concrete,
     ),
     substs: {
         "\\A": SubstContext {
             subst: Subst(
                 {},
             ),
             class_context: "\\B",
             from_req_extends: false,
         },
         "\\B": SubstContext {
             subst: Subst(
                 {},
             ),
             class_context: "\\BB",
             from_req_extends: false,
         },
     },
     ancestors: {
         "\\A": A,
         "\\B": B,
     },
     consts: {
         "T": ClassConst {
             is_synthesized: true,
-            kind: CCConcrete,
+            kind: CCAbstract(
+                true,
+            ),
             pos: Pos(root|change_type.php, 11:23-24),
             ty: HH\TypeStructure<this::T>,
             origin: "\\B",
             refs: [],
         },
         "class": ClassConst {
             is_synthesized: true,
             kind: CCConcrete,
             pos: Pos(root|change_type.php, 14:7-9),
             ty: HH\classname<this>,
             origin: "\\BB",
             refs: [],
         },
     },
     type_consts: {
         "T": TypeConst {
             is_synthesized: false,
             name: (
                 Pos(root|change_type.php, 11:23-24),
                 "T",
             ),
-            kind: ConcreteTypeconst {
-                ty: float,
+            kind: AbstractTypeconst {
+                as_constraint: Some(
+                    num,
+                ),
+                super_constraint: None,
+                default: Some(
+                    float,
+                ),
             },
             origin: "\\B",
             enforceable: None,
             reifiable: None,
-            is_concretized: true,
+            is_concretized: false,
             is_ctx: false,
         },
     },
     extends: {
         "\\A",
         "\\B",
     },
 }
