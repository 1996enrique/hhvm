--- ocaml
+++ rupro
@@ -1,228 +1,228 @@
 FoldedClass {
     name: "\\E",
     pos: Pos(root|abstract_diamond.good.php, 4:21-22),
     kind: CenumClass(
         Abstract,
     ),
     enum_type: EnumType {
         base: mixed,
         constraint: None,
         includes: [],
     },
     ancestors: {
         "\\HH\\BuiltinAbstractEnumClass": HH\BuiltinAbstractEnumClass,
     },
     consts: {
         "Y": ClassConst {
             is_synthesized: false,
             kind: CCAbstract(
                 false,
             ),
             pos: Pos(root|abstract_diamond.good.php, 5:19-20),
             ty: HH\MemberOf<E, string>,
             origin: "\\E",
             refs: [],
         },
         "class": ClassConst {
             is_synthesized: true,
             kind: CCConcrete,
             pos: Pos(root|abstract_diamond.good.php, 4:21-22),
             ty: HH\classname<this>,
             origin: "\\E",
             refs: [],
         },
     },
     extends: {
         "\\HH\\BuiltinAbstractEnumClass",
     },
 }
 FoldedClass {
     name: "\\F",
     pos: Pos(root|abstract_diamond.good.php, 9:12-13),
     kind: CenumClass(
         Concrete,
     ),
     enum_type: EnumType {
         base: mixed,
         constraint: None,
         includes: [
             E,
         ],
     },
     substs: {
         "\\E": SubstContext {
             subst: Subst(
                 {},
             ),
             class_context: "\\F",
             from_req_extends: false,
         },
     },
     ancestors: {
         "\\E": E,
         "\\HH\\BuiltinAbstractEnumClass": HH\BuiltinAbstractEnumClass,
         "\\HH\\BuiltinEnumClass": HH\BuiltinEnumClass<HH\MemberOf<F, mixed>>,
     },
     consts: {
         "Y": ClassConst {
             is_synthesized: false,
             kind: CCConcrete,
             pos: Pos(root|abstract_diamond.good.php, 10:10-11),
             ty: HH\MemberOf<F, string>,
             origin: "\\F",
             refs: [],
         },
         "class": ClassConst {
             is_synthesized: true,
             kind: CCConcrete,
             pos: Pos(root|abstract_diamond.good.php, 9:12-13),
             ty: HH\classname<this>,
             origin: "\\F",
             refs: [],
         },
     },
     extends: {
         "\\E",
         "\\HH\\BuiltinAbstractEnumClass",
         "\\HH\\BuiltinEnumClass",
     },
 }
 FoldedClass {
     name: "\\G",
     pos: Pos(root|abstract_diamond.good.php, 13:21-22),
     kind: CenumClass(
         Abstract,
     ),
     enum_type: EnumType {
         base: mixed,
         constraint: None,
         includes: [
             E,
         ],
     },
     substs: {
         "\\E": SubstContext {
             subst: Subst(
                 {},
             ),
             class_context: "\\G",
             from_req_extends: false,
         },
     },
     ancestors: {
         "\\E": E,
         "\\HH\\BuiltinAbstractEnumClass": HH\BuiltinAbstractEnumClass,
     },
     consts: {
         "Y": ClassConst {
             is_synthesized: false,
             kind: CCAbstract(
                 false,
             ),
             pos: Pos(root|abstract_diamond.good.php, 5:19-20),
             ty: HH\MemberOf<E, string>,
             origin: "\\E",
             refs: [],
         },
         "Z": ClassConst {
             is_synthesized: false,
             kind: CCAbstract(
                 false,
             ),
             pos: Pos(root|abstract_diamond.good.php, 14:19-20),
             ty: HH\MemberOf<G, string>,
             origin: "\\G",
             refs: [],
         },
         "class": ClassConst {
             is_synthesized: true,
             kind: CCConcrete,
             pos: Pos(root|abstract_diamond.good.php, 13:21-22),
             ty: HH\classname<this>,
             origin: "\\G",
             refs: [],
         },
     },
     extends: {
         "\\E",
         "\\HH\\BuiltinAbstractEnumClass",
     },
 }
 FoldedClass {
     name: "\\H",
     pos: Pos(root|abstract_diamond.good.php, 17:12-13),
     kind: CenumClass(
         Concrete,
     ),
     enum_type: EnumType {
         base: mixed,
         constraint: None,
         includes: [
             F,
             G,
         ],
     },
     substs: {
         "\\E": SubstContext {
             subst: Subst(
                 {},
             ),
-            class_context: "\\F",
+            class_context: "\\G",
             from_req_extends: false,
         },
         "\\F": SubstContext {
             subst: Subst(
                 {},
             ),
             class_context: "\\H",
             from_req_extends: false,
         },
         "\\G": SubstContext {
             subst: Subst(
                 {},
             ),
             class_context: "\\H",
             from_req_extends: false,
         },
     },
     ancestors: {
         "\\E": E,
         "\\F": F,
         "\\G": G,
         "\\HH\\BuiltinAbstractEnumClass": HH\BuiltinAbstractEnumClass,
         "\\HH\\BuiltinEnumClass": HH\BuiltinEnumClass<HH\MemberOf<H, mixed>>,
     },
     consts: {
         "Y": ClassConst {
             is_synthesized: false,
             kind: CCConcrete,
             pos: Pos(root|abstract_diamond.good.php, 10:10-11),
             ty: HH\MemberOf<F, string>,
             origin: "\\F",
             refs: [],
         },
         "Z": ClassConst {
             is_synthesized: false,
             kind: CCConcrete,
             pos: Pos(root|abstract_diamond.good.php, 18:10-11),
             ty: HH\MemberOf<H, string>,
             origin: "\\H",
             refs: [],
         },
         "class": ClassConst {
             is_synthesized: true,
             kind: CCConcrete,
             pos: Pos(root|abstract_diamond.good.php, 17:12-13),
             ty: HH\classname<this>,
             origin: "\\H",
             refs: [],
         },
     },
     extends: {
         "\\E",
         "\\F",
         "\\G",
         "\\HH\\BuiltinAbstractEnumClass",
         "\\HH\\BuiltinEnumClass",
     },
 }
