--- ocaml
+++ rupro
@@ -1,217 +1,217 @@
 FoldedClass {
     name: "\\C",
     pos: Pos(root|self_in_type_constant.php, 3:7-8),
     kind: Cclass(
         Concrete,
     ),
     consts: {
         "T": ClassConst {
             is_synthesized: true,
             kind: CCConcrete,
             pos: Pos(root|self_in_type_constant.php, 4:14-15),
             ty: HH\TypeStructure<this::T>,
             origin: "\\C",
             refs: [],
         },
         "U": ClassConst {
             is_synthesized: true,
             kind: CCConcrete,
             pos: Pos(root|self_in_type_constant.php, 5:14-15),
             ty: HH\TypeStructure<this::U>,
             origin: "\\C",
             refs: [],
         },
         "class": ClassConst {
             is_synthesized: true,
             kind: CCConcrete,
             pos: Pos(root|self_in_type_constant.php, 3:7-8),
             ty: HH\classname<this>,
             origin: "\\C",
             refs: [],
         },
     },
     type_consts: {
         "T": TypeConst {
             is_synthesized: false,
             name: (
                 Pos(root|self_in_type_constant.php, 4:14-15),
                 "T",
             ),
             kind: ConcreteTypeconst {
                 ty: int,
             },
             origin: "\\C",
             enforceable: None,
             reifiable: None,
             is_concretized: false,
             is_ctx: false,
         },
         "U": TypeConst {
             is_synthesized: false,
             name: (
                 Pos(root|self_in_type_constant.php, 5:14-15),
                 "U",
             ),
             kind: ConcreteTypeconst {
                 ty: C::T,
             },
             origin: "\\C",
             enforceable: None,
             reifiable: None,
             is_concretized: false,
             is_ctx: false,
         },
     },
 }
 FoldedClass {
     name: "\\I",
     pos: Pos(root|self_in_type_constant.php, 8:11-12),
     kind: Cinterface,
     consts: {
         "V": ClassConst {
             is_synthesized: true,
             kind: CCConcrete,
             pos: Pos(root|self_in_type_constant.php, 9:14-15),
             ty: HH\TypeStructure<this::V>,
             origin: "\\I",
             refs: [],
         },
         "W": ClassConst {
             is_synthesized: true,
             kind: CCConcrete,
             pos: Pos(root|self_in_type_constant.php, 10:14-15),
             ty: HH\TypeStructure<this::W>,
             origin: "\\I",
             refs: [],
         },
         "class": ClassConst {
             is_synthesized: true,
             kind: CCConcrete,
             pos: Pos(root|self_in_type_constant.php, 8:11-12),
             ty: HH\classname<this>,
             origin: "\\I",
             refs: [],
         },
     },
     type_consts: {
         "V": TypeConst {
             is_synthesized: false,
             name: (
                 Pos(root|self_in_type_constant.php, 9:14-15),
                 "V",
             ),
             kind: ConcreteTypeconst {
                 ty: int,
             },
             origin: "\\I",
             enforceable: None,
             reifiable: None,
             is_concretized: false,
             is_ctx: false,
         },
         "W": TypeConst {
             is_synthesized: false,
             name: (
                 Pos(root|self_in_type_constant.php, 10:14-15),
                 "W",
             ),
             kind: ConcreteTypeconst {
                 ty: I::V,
             },
             origin: "\\I",
             enforceable: None,
             reifiable: None,
             is_concretized: false,
             is_ctx: false,
         },
     },
 }
 FoldedClass {
     name: "\\T",
     pos: Pos(root|self_in_type_constant.php, 13:7-8),
     kind: Ctrait,
     substs: {
         "\\C": SubstContext {
             subst: Subst(
                 {},
             ),
             class_context: "\\T",
             from_req_extends: true,
         },
     },
     methods: {
         "f": FoldedElement {
             flags: ABSTRACT,
             origin: "\\T",
             visibility: Public,
             deprecated: None,
         },
     },
     consts: {
         "T": ClassConst {
             is_synthesized: true,
             kind: CCConcrete,
             pos: Pos(root|self_in_type_constant.php, 4:14-15),
             ty: HH\TypeStructure<this::T>,
             origin: "\\C",
             refs: [],
         },
         "U": ClassConst {
             is_synthesized: true,
             kind: CCConcrete,
             pos: Pos(root|self_in_type_constant.php, 5:14-15),
             ty: HH\TypeStructure<this::U>,
             origin: "\\C",
             refs: [],
         },
         "class": ClassConst {
             is_synthesized: true,
             kind: CCConcrete,
             pos: Pos(root|self_in_type_constant.php, 13:7-8),
             ty: HH\classname<this>,
             origin: "\\T",
             refs: [],
         },
     },
     type_consts: {
         "T": TypeConst {
-            is_synthesized: true,
+            is_synthesized: false,
             name: (
                 Pos(root|self_in_type_constant.php, 4:14-15),
                 "T",
             ),
             kind: ConcreteTypeconst {
                 ty: int,
             },
             origin: "\\C",
             enforceable: None,
             reifiable: None,
             is_concretized: false,
             is_ctx: false,
         },
         "U": TypeConst {
-            is_synthesized: true,
+            is_synthesized: false,
             name: (
                 Pos(root|self_in_type_constant.php, 5:14-15),
                 "U",
             ),
             kind: ConcreteTypeconst {
                 ty: C::T,
             },
             origin: "\\C",
             enforceable: None,
             reifiable: None,
             is_concretized: false,
             is_ctx: false,
         },
     },
     req_ancestors: [
         Requirement(
             Pos(root|self_in_type_constant.php, 14:19-20),
             C,
         ),
     ],
     req_ancestors_extends: {
         "\\C",
     },
 }
