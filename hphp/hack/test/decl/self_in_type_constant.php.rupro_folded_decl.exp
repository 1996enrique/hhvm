--- ocaml
+++ rupro
@@ -1,217 +1,215 @@
 { Decl_defs.dc_need_init = false; dc_abstract = false; dc_final = false;
   dc_const = false; dc_internal = false; dc_deferred_init_members = {};
   dc_kind = (Cclass Concrete); dc_is_xhp = false; dc_has_xhp_keyword = false;
   dc_module = None; dc_name = "\\C"; dc_pos = [3:7-8]; dc_tparams = [];
   dc_where_constraints = []; dc_substs = {};
   dc_consts =
   { "T" ->
     { Typing_defs.cc_synthesized = true;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [4:14-15];
       cc_type =
       (Rwitness_from_decl ([4:14-15]),
        (Tapply (([4:14-15], "\\HH\\TypeStructure"),
           [(Rwitness_from_decl ([4:14-15]),
             (Taccess
                ((Rwitness_from_decl ([4:14-15]), Tthis), [([4:14-15], "T")])))
             ]
           )));
       cc_origin = "\\C"; cc_refs = [] };
     "U" ->
     { Typing_defs.cc_synthesized = true;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [5:14-15];
       cc_type =
       (Rwitness_from_decl ([5:14-15]),
        (Tapply (([5:14-15], "\\HH\\TypeStructure"),
           [(Rwitness_from_decl ([5:14-15]),
             (Taccess
                ((Rwitness_from_decl ([5:14-15]), Tthis), [([5:14-15], "U")])))
             ]
           )));
       cc_origin = "\\C"; cc_refs = [] };
     "class" ->
     { Typing_defs.cc_synthesized = true;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [3:7-8];
       cc_type =
       (Rclass_class ([3:7-8]),
        (Tapply (([3:7-8], "\\HH\\classname"),
           [(Rclass_class ([3:7-8]), Tthis)])));
       cc_origin = "\\C"; cc_refs = [] } };
   dc_typeconsts =
   { "T" ->
     { Typing_defs.ttc_synthesized = false; ttc_name = ([4:14-15], "T");
       ttc_kind =
       (Typing_defs.TCConcrete
          { Typing_defs.tc_type = (Rhint ([4:18-21]), (Tprim Tint)) });
       ttc_origin = "\\C"; ttc_enforceable = ([Pos.none], false);
       ttc_reifiable = None; ttc_concretized = false; ttc_is_ctx = false };
     "U" ->
     { Typing_defs.ttc_synthesized = false; ttc_name = ([5:14-15], "U");
       ttc_kind =
       (Typing_defs.TCConcrete
          { Typing_defs.tc_type =
            (Rhint ([5:18-25]),
             (Taccess
                ((Rhint ([5:18-25]), (Tapply (([3:7-8], "\\C"), []))),
                 [([5:24-25], "T")])))
            });
       ttc_origin = "\\C"; ttc_enforceable = ([Pos.none], false);
       ttc_reifiable = None; ttc_concretized = false; ttc_is_ctx = false } };
   dc_props = {}; dc_sprops = {}; dc_methods = {}; dc_smethods = {};
   dc_construct = (None, Typing_defs_core.Inconsistent); dc_ancestors = {};
   dc_support_dynamic_type = false; dc_req_ancestors = [];
   dc_req_ancestors_extends = {}; dc_extends = {}; dc_sealed_whitelist = None;
   dc_xhp_attr_deps = {}; dc_xhp_enum_values = {}; dc_enum_type = None;
   dc_decl_errors = <opaque> }
 { Decl_defs.dc_need_init = false; dc_abstract = true; dc_final = false;
   dc_const = false; dc_internal = false; dc_deferred_init_members = {};
   dc_kind = Cinterface; dc_is_xhp = false; dc_has_xhp_keyword = false;
   dc_module = None; dc_name = "\\I"; dc_pos = [8:11-12]; dc_tparams = [];
   dc_where_constraints = []; dc_substs = {};
   dc_consts =
   { "V" ->
     { Typing_defs.cc_synthesized = true;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [9:14-15];
       cc_type =
       (Rwitness_from_decl ([9:14-15]),
        (Tapply (([9:14-15], "\\HH\\TypeStructure"),
           [(Rwitness_from_decl ([9:14-15]),
             (Taccess
                ((Rwitness_from_decl ([9:14-15]), Tthis), [([9:14-15], "V")])))
             ]
           )));
       cc_origin = "\\I"; cc_refs = [] };
     "W" ->
     { Typing_defs.cc_synthesized = true;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [10:14-15];
       cc_type =
       (Rwitness_from_decl ([10:14-15]),
        (Tapply (([10:14-15], "\\HH\\TypeStructure"),
           [(Rwitness_from_decl ([10:14-15]),
             (Taccess
                ((Rwitness_from_decl ([10:14-15]), Tthis), [([10:14-15], "W")])))
             ]
           )));
       cc_origin = "\\I"; cc_refs = [] };
     "class" ->
     { Typing_defs.cc_synthesized = true;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [8:11-12];
       cc_type =
       (Rclass_class ([8:11-12]),
        (Tapply (([8:11-12], "\\HH\\classname"),
           [(Rclass_class ([8:11-12]), Tthis)])));
       cc_origin = "\\I"; cc_refs = [] } };
   dc_typeconsts =
   { "V" ->
     { Typing_defs.ttc_synthesized = false; ttc_name = ([9:14-15], "V");
       ttc_kind =
       (Typing_defs.TCConcrete
          { Typing_defs.tc_type = (Rhint ([9:18-21]), (Tprim Tint)) });
       ttc_origin = "\\I"; ttc_enforceable = ([Pos.none], false);
       ttc_reifiable = None; ttc_concretized = false; ttc_is_ctx = false };
     "W" ->
     { Typing_defs.ttc_synthesized = false; ttc_name = ([10:14-15], "W");
       ttc_kind =
       (Typing_defs.TCConcrete
          { Typing_defs.tc_type =
            (Rhint ([10:18-25]),
             (Taccess
                ((Rhint ([10:18-25]), (Tapply (([8:11-12], "\\I"), []))),
                 [([10:24-25], "V")])))
            });
       ttc_origin = "\\I"; ttc_enforceable = ([Pos.none], false);
       ttc_reifiable = None; ttc_concretized = false; ttc_is_ctx = false } };
   dc_props = {}; dc_sprops = {}; dc_methods = {}; dc_smethods = {};
   dc_construct = (None, Typing_defs_core.Inconsistent); dc_ancestors = {};
   dc_support_dynamic_type = false; dc_req_ancestors = [];
   dc_req_ancestors_extends = {}; dc_extends = {}; dc_sealed_whitelist = None;
   dc_xhp_attr_deps = {}; dc_xhp_enum_values = {}; dc_enum_type = None;
   dc_decl_errors = <opaque> }
 { Decl_defs.dc_need_init = false; dc_abstract = true; dc_final = false;
   dc_const = false; dc_internal = false; dc_deferred_init_members = {};
   dc_kind = Ctrait; dc_is_xhp = false; dc_has_xhp_keyword = false;
   dc_module = None; dc_name = "\\T"; dc_pos = [13:7-8]; dc_tparams = [];
   dc_where_constraints = [];
   dc_substs =
   { "\\C" ->
     { Decl_defs.sc_subst = {}; sc_class_context = "\\T";
       sc_from_req_extends = true } };
   dc_consts =
   { "T" ->
     { Typing_defs.cc_synthesized = true;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [4:14-15];
       cc_type =
       (Rwitness_from_decl ([4:14-15]),
        (Tapply (([4:14-15], "\\HH\\TypeStructure"),
           [(Rwitness_from_decl ([4:14-15]),
             (Taccess
                ((Rwitness_from_decl ([4:14-15]), Tthis), [([4:14-15], "T")])))
             ]
           )));
       cc_origin = "\\C"; cc_refs = [] };
     "U" ->
     { Typing_defs.cc_synthesized = true;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [5:14-15];
       cc_type =
       (Rwitness_from_decl ([5:14-15]),
        (Tapply (([5:14-15], "\\HH\\TypeStructure"),
           [(Rwitness_from_decl ([5:14-15]),
             (Taccess
                ((Rwitness_from_decl ([5:14-15]), Tthis), [([5:14-15], "U")])))
             ]
           )));
       cc_origin = "\\C"; cc_refs = [] };
     "class" ->
     { Typing_defs.cc_synthesized = true;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [13:7-8];
       cc_type =
       (Rclass_class ([13:7-8]),
        (Tapply (([13:7-8], "\\HH\\classname"),
           [(Rclass_class ([13:7-8]), Tthis)])));
       cc_origin = "\\T"; cc_refs = [] } };
   dc_typeconsts =
   { "T" ->
-    { Typing_defs.ttc_synthesized = true; ttc_name = ([4:14-15], "T");
+    { Typing_defs.ttc_synthesized = false; ttc_name = ([4:14-15], "T");
       ttc_kind =
       (Typing_defs.TCConcrete
          { Typing_defs.tc_type = (Rhint ([4:18-21]), (Tprim Tint)) });
       ttc_origin = "\\C"; ttc_enforceable = ([Pos.none], false);
       ttc_reifiable = None; ttc_concretized = false; ttc_is_ctx = false };
     "U" ->
-    { Typing_defs.ttc_synthesized = true; ttc_name = ([5:14-15], "U");
+    { Typing_defs.ttc_synthesized = false; ttc_name = ([5:14-15], "U");
       ttc_kind =
       (Typing_defs.TCConcrete
          { Typing_defs.tc_type =
            (Rhint ([5:18-25]),
             (Taccess
                ((Rhint ([5:18-25]), (Tapply (([3:7-8], "\\C"), []))),
                 [([5:24-25], "T")])))
            });
       ttc_origin = "\\C"; ttc_enforceable = ([Pos.none], false);
       ttc_reifiable = None; ttc_concretized = false; ttc_is_ctx = false } };
   dc_props = {}; dc_sprops = {};
   dc_methods =
   { "f" ->
     { Decl_defs.elt_flags =
-      { "Abstract" -> true;
+      { "Abstract" -> false;
         "Const" -> false;
         "Dynamicallycallable" -> false;
         "Final" -> false;
         "Lateinit" -> false;
         "Lsb" -> false;
         "NeedsInit" -> false;
         "ReadonlyProp" -> false;
         "SuperfluousOverride" -> false;
         "SupportDynamicType" -> false;
         "Synthesized" -> false;
         "XaHasDefault" -> false;
         "XaTagLateinit" -> false;
         "XaTagRequired" -> false };
       elt_origin = "\\T"; elt_visibility = Typing_defs_core.Vpublic;
       elt_deprecated = None } };
   dc_smethods = {}; dc_construct = (None, Typing_defs_core.Inconsistent);
-  dc_ancestors = {}; dc_support_dynamic_type = false;
-  dc_req_ancestors =
-  [([14:19-20], (Rhint ([14:19-20]), (Tapply (([14:19-20], "\\C"), []))))];
-  dc_req_ancestors_extends = { "\\C" }; dc_extends = {};
-  dc_sealed_whitelist = None; dc_xhp_attr_deps = {}; dc_xhp_enum_values = {};
-  dc_enum_type = None; dc_decl_errors = <opaque> }
+  dc_ancestors = {}; dc_support_dynamic_type = false; dc_req_ancestors = [];
+  dc_req_ancestors_extends = {}; dc_extends = {}; dc_sealed_whitelist = None;
+  dc_xhp_attr_deps = {}; dc_xhp_enum_values = {}; dc_enum_type = None;
+  dc_decl_errors = <opaque> }
