--- ocaml
+++ rupro
@@ -1,38 +1,35 @@
 { Decl_defs.dc_need_init = false; dc_abstract = true; dc_final = false;
   dc_const = false; dc_internal = false; dc_deferred_init_members = {};
   dc_kind = Cenum; dc_is_xhp = false; dc_has_xhp_keyword = false;
   dc_module = None; dc_name = "\\E"; dc_pos = [4:6-7]; dc_tparams = [];
   dc_where_constraints = []; dc_substs = {};
   dc_consts =
   { "A" ->
     { Typing_defs.cc_synthesized = false;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [5:3-4];
-      cc_type = (Rhint ([4:10-16]), (Tapply (([4:6-7], "\\E"), [])));
+      cc_type = (Rwitness_from_decl ([5:7-10]), (Tprim Tstring));
       cc_origin = "\\E"; cc_refs = [] };
     "B" ->
     { Typing_defs.cc_synthesized = false;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [6:3-4];
-      cc_type = (Rhint ([4:10-16]), (Tapply (([4:6-7], "\\E"), [])));
+      cc_type = (Rwitness_from_decl ([6:7-10]), (Tprim Tstring));
       cc_origin = "\\E"; cc_refs = [] };
     "class" ->
     { Typing_defs.cc_synthesized = true;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [4:6-7];
       cc_type =
       (Rclass_class ([4:6-7]),
        (Tapply (([4:6-7], "\\HH\\classname"),
           [(Rclass_class ([4:6-7]), Tthis)])));
       cc_origin = "\\E"; cc_refs = [] } };
   dc_typeconsts = {}; dc_props = {}; dc_sprops = {}; dc_methods = {};
   dc_smethods = {}; dc_construct = (None, Typing_defs_core.Inconsistent);
   dc_ancestors =
   { "\\HH\\BuiltinEnum" ->
     (Rhint ([4:6-7]),
      (Tapply (([4:6-7], "\\HH\\BuiltinEnum"),
         [(Rhint ([4:6-7]), (Tapply (([4:6-7], "\\E"), [])))]))) };
   dc_support_dynamic_type = false; dc_req_ancestors = [];
-  dc_req_ancestors_extends = {}; dc_extends = { "\\HH\\BuiltinEnum" };
-  dc_sealed_whitelist = None; dc_xhp_attr_deps = {}; dc_xhp_enum_values = {};
-  dc_enum_type =
-  (Some { Typing_defs.te_base = (Rhint ([4:10-16]), (Tprim Tstring));
-          te_constraint = None; te_includes = [] });
+  dc_req_ancestors_extends = {}; dc_extends = {}; dc_sealed_whitelist = None;
+  dc_xhp_attr_deps = {}; dc_xhp_enum_values = {}; dc_enum_type = None;
   dc_decl_errors = <opaque> }
