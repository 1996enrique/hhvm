--- ocaml
+++ rupro
@@ -1,47 +1,44 @@
 { Decl_defs.dc_need_init = false; dc_abstract = true; dc_final = false;
   dc_const = false; dc_internal = false; dc_deferred_init_members = {};
   dc_kind = Ctrait; dc_is_xhp = false; dc_has_xhp_keyword = false;
   dc_module = None; dc_name = "\\NS1\\NS2\\MyTrait"; dc_pos = [6:13-20];
   dc_tparams = []; dc_where_constraints = []; dc_substs = {};
   dc_consts =
   { "class" ->
     { Typing_defs.cc_synthesized = true;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [6:13-20];
       cc_type =
       (Rclass_class ([6:13-20]),
        (Tapply (([6:13-20], "\\HH\\classname"),
           [(Rclass_class ([6:13-20]), Tthis)])));
       cc_origin = "\\NS1\\NS2\\MyTrait"; cc_refs = [] } };
   dc_typeconsts = {}; dc_props = {}; dc_sprops = {}; dc_methods = {};
   dc_smethods = {}; dc_construct = (None, Typing_defs_core.Inconsistent);
   dc_ancestors = {}; dc_support_dynamic_type = false; dc_req_ancestors = [];
   dc_req_ancestors_extends = {}; dc_extends = {}; dc_sealed_whitelist = None;
   dc_xhp_attr_deps = {}; dc_xhp_enum_values = {}; dc_enum_type = None;
   dc_decl_errors = <opaque> }
 { Decl_defs.dc_need_init = false; dc_abstract = false; dc_final = true;
   dc_const = false; dc_internal = false; dc_deferred_init_members = {};
   dc_kind = (Cclass Concrete); dc_is_xhp = false; dc_has_xhp_keyword = false;
   dc_module = None; dc_name = "\\C"; dc_pos = [12:15-16]; dc_tparams = [];
   dc_where_constraints = [];
   dc_substs =
   { "\\NS1\\NS2\\MyTrait" ->
     { Decl_defs.sc_subst = {}; sc_class_context = "\\C";
       sc_from_req_extends = false } };
   dc_consts =
   { "class" ->
     { Typing_defs.cc_synthesized = true;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [12:15-16];
       cc_type =
       (Rclass_class ([12:15-16]),
        (Tapply (([12:15-16], "\\HH\\classname"),
           [(Rclass_class ([12:15-16]), Tthis)])));
       cc_origin = "\\C"; cc_refs = [] } };
   dc_typeconsts = {}; dc_props = {}; dc_sprops = {}; dc_methods = {};
-  dc_smethods = {}; dc_construct = (None, Typing_defs_core.FinalClass);
-  dc_ancestors =
-  { "\\NS1\\NS2\\MyTrait" ->
-    (Rhint ([13:9-20]), (Tapply (([13:9-20], "\\NS1\\NS2\\MyTrait"), []))) };
-  dc_support_dynamic_type = false; dc_req_ancestors = [];
+  dc_smethods = {}; dc_construct = (None, Typing_defs_core.Inconsistent);
+  dc_ancestors = {}; dc_support_dynamic_type = false; dc_req_ancestors = [];
   dc_req_ancestors_extends = {}; dc_extends = { "\\NS1\\NS2\\MyTrait" };
   dc_sealed_whitelist = None; dc_xhp_attr_deps = {}; dc_xhp_enum_values = {};
   dc_enum_type = None; dc_decl_errors = <opaque> }
