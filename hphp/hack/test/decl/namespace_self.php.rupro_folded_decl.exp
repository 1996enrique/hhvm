{ Decl_defs.dc_need_init = false; dc_abstract = false; dc_final = false;
  dc_const = false; dc_internal = false; dc_deferred_init_members = {};
  dc_kind = (Cclass Concrete); dc_is_xhp = false; dc_has_xhp_keyword = false;
  dc_module = None; dc_name = "\\NS1\\NS2\\C"; dc_pos = [5:7-8];
  dc_tparams = []; dc_where_constraints = []; dc_substs = {};
  dc_consts =
  { "KEY" ->
    { Typing_defs.cc_synthesized = false;
      cc_abstract = Typing_defs.CCConcrete; cc_pos = [6:16-19];
      cc_type = (Rhint ([6:9-15]), (Tprim Tstring));
      cc_origin = "\\NS1\\NS2\\C"; cc_refs = [] };
    "TInt" ->
    { Typing_defs.cc_synthesized = true;
      cc_abstract = Typing_defs.CCConcrete; cc_pos = [8:14-18];
      cc_type =
      (Rwitness_from_decl ([8:14-18]),
       (Tapply (([8:14-18], "\\HH\\TypeStructure"),
          [(Rwitness_from_decl ([8:14-18]),
            (Taccess
               ((Rwitness_from_decl ([8:14-18]), Tthis),
                [([8:14-18], "TInt")])))
            ]
          )));
      cc_origin = "\\NS1\\NS2\\C"; cc_refs = [] };
    "TShape" ->
    { Typing_defs.cc_synthesized = true;
      cc_abstract = Typing_defs.CCConcrete; cc_pos = [9:14-20];
      cc_type =
      (Rwitness_from_decl ([9:14-20]),
       (Tapply (([9:14-20], "\\HH\\TypeStructure"),
          [(Rwitness_from_decl ([9:14-20]),
            (Taccess
               ((Rwitness_from_decl ([9:14-20]), Tthis),
                [([9:14-20], "TShape")])))
            ]
          )));
      cc_origin = "\\NS1\\NS2\\C"; cc_refs = [] };
    "class" ->
    { Typing_defs.cc_synthesized = true;
      cc_abstract = Typing_defs.CCConcrete; cc_pos = [5:7-8];
      cc_type =
      (Rclass_class ([5:7-8]),
       (Tapply (([5:7-8], "\\HH\\classname"),
          [(Rclass_class ([5:7-8]), Tthis)])));
      cc_origin = "\\NS1\\NS2\\C"; cc_refs = [] } };
  dc_typeconsts =
  { "TInt" ->
    { Typing_defs.ttc_synthesized = false; ttc_name = ([8:14-18], "TInt");
      ttc_kind =
      (Typing_defs.TCConcrete
         { Typing_defs.tc_type = (Rhint ([8:21-24]), (Tprim Tint)) });
      ttc_origin = "\\NS1\\NS2\\C"; ttc_enforceable = ([Pos.none], false);
      ttc_reifiable = None; ttc_concretized = false; ttc_is_ctx = false };
    "TShape" ->
    { Typing_defs.ttc_synthesized = false; ttc_name = ([9:14-20], "TShape");
      ttc_kind =
      (Typing_defs.TCConcrete
         { Typing_defs.tc_type =
           (Rhint ([9:23-11:4]),
            (Tshape (Typing_defs_core.Closed_shape,
               { (Typing_defs_core.TSFclass_const (
                    ([10:5-9], "\\NS1\\NS2\\C"), ([10:11-14], "KEY"))) ->
                 { sft_optional = false;
                   sft_ty =
                   (Rhint ([10:18-28]),
                    (Taccess
                       ((Rhint ([10:18-28]),
                         (Tapply (([5:7-8], "\\NS1\\NS2\\C"), []))),
                        [([10:24-28], "TInt")])))
                   } }
               )))
           });
      ttc_origin = "\\NS1\\NS2\\C"; ttc_enforceable = ([Pos.none], false);
      ttc_reifiable = None; ttc_concretized = false; ttc_is_ctx = false } };
  dc_props = {}; dc_sprops = {};
  dc_methods =
  { "f" ->
    { Decl_defs.elt_flags =
      { "Abstract" -> false;
        "Const" -> false;
        "Dynamicallycallable" -> false;
        "Final" -> false;
        "Lateinit" -> false;
        "Lsb" -> false;
        "NeedsInit" -> false;
        "ReadonlyProp" -> false;
        "SuperfluousOverride" -> false;
        "SupportDynamicType" -> false;
        "Synthesized" -> false;
        "XaHasDefault" -> false;
        "XaTagLateinit" -> false;
        "XaTagRequired" -> false };
      elt_origin = "\\NS1\\NS2\\C";
      elt_visibility = Typing_defs_core.Vpublic; elt_deprecated = None } };
  dc_smethods = {}; dc_construct = (None, Typing_defs_core.Inconsistent);
  dc_ancestors = {}; dc_support_dynamic_type = false; dc_req_ancestors = [];
  dc_req_ancestors_extends = {}; dc_extends = {}; dc_sealed_whitelist = None;
  dc_xhp_attr_deps = {}; dc_xhp_enum_values = {}; dc_enum_type = None;
  dc_decl_errors = <opaque> }

They matched!
