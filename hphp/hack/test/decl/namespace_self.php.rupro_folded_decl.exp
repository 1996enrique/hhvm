FoldedClass {
    name: "\\NS1\\NS2\\C",
    pos: Pos(root|namespace_self.php, 5:7-8),
    kind: Cclass(
        Concrete,
    ),
    methods: {
        "f": FoldedElement {
            flags: (empty),
            origin: "\\NS1\\NS2\\C",
            visibility: Public,
            deprecated: None,
        },
    },
    consts: {
        "KEY": ClassConst {
            is_synthesized: false,
            kind: CCConcrete,
            pos: Pos(root|namespace_self.php, 6:16-19),
            ty: string,
            origin: "\\NS1\\NS2\\C",
            refs: [],
        },
        "TInt": ClassConst {
            is_synthesized: true,
            kind: CCConcrete,
            pos: Pos(root|namespace_self.php, 8:14-18),
            ty: HH\TypeStructure<this::TInt>,
            origin: "\\NS1\\NS2\\C",
            refs: [],
        },
        "TShape": ClassConst {
            is_synthesized: true,
            kind: CCConcrete,
            pos: Pos(root|namespace_self.php, 9:14-20),
            ty: HH\TypeStructure<this::TShape>,
            origin: "\\NS1\\NS2\\C",
            refs: [],
        },
        "class": ClassConst {
            is_synthesized: true,
            kind: CCConcrete,
            pos: Pos(root|namespace_self.php, 5:7-8),
            ty: HH\classname<this>,
            origin: "\\NS1\\NS2\\C",
            refs: [],
        },
    },
    type_consts: {
        "TInt": TypeConst {
            is_synthesized: false,
            name: (
                Pos(root|namespace_self.php, 8:14-18),
                "TInt",
            ),
            kind: ConcreteTypeconst {
                ty: int,
            },
            origin: "\\NS1\\NS2\\C",
            enforceable: None,
            reifiable: None,
            is_concretized: false,
            is_ctx: false,
        },
        "TShape": TypeConst {
            is_synthesized: false,
            name: (
                Pos(root|namespace_self.php, 9:14-20),
                "TShape",
            ),
            kind: ConcreteTypeconst {
                ty: shape(NS1\NS2\C::KEY => NS1\NS2\C::TInt),
            },
            origin: "\\NS1\\NS2\\C",
            enforceable: None,
            reifiable: None,
            is_concretized: false,
            is_ctx: false,
        },
    },
}

They matched!
