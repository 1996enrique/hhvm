--- ocaml
+++ rupro
@@ -1,87 +1,87 @@
 { Decl_defs.dc_need_init = false; dc_abstract = false; dc_final = false;
   dc_const = false; dc_internal = false; dc_deferred_init_members = {};
   dc_kind = (Cclass Concrete); dc_is_xhp = false; dc_has_xhp_keyword = false;
   dc_module = None; dc_name = "\\C"; dc_pos = [4:7-8];
   dc_tparams =
   [{ Typing_defs_core.tp_variance = Invariant; tp_name = ([4:15-17], "Tc");
      tp_tparams = []; tp_constraints = []; tp_reified = Reified;
      tp_user_attributes = [] }
     ];
   dc_where_constraints = []; dc_substs = {};
   dc_consts =
   { "class" ->
     { Typing_defs.cc_synthesized = true;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [4:7-8];
       cc_type =
       (Rclass_class ([4:7-8]),
        (Tapply (([4:7-8], "\\HH\\classname"),
           [(Rclass_class ([4:7-8]), Tthis)])));
       cc_origin = "\\C"; cc_refs = [] } };
   dc_typeconsts = {}; dc_props = {}; dc_sprops = {}; dc_methods = {};
   dc_smethods = {}; dc_construct = (None, Typing_defs_core.Inconsistent);
   dc_ancestors = {}; dc_support_dynamic_type = false; dc_req_ancestors = [];
   dc_req_ancestors_extends = {}; dc_extends = {}; dc_sealed_whitelist = None;
   dc_xhp_attr_deps = {}; dc_xhp_enum_values = {}; dc_enum_type = None;
   dc_decl_errors = <opaque> }
 { Decl_defs.dc_need_init = false; dc_abstract = false; dc_final = false;
   dc_const = false; dc_internal = false; dc_deferred_init_members = {};
   dc_kind = (Cclass Concrete); dc_is_xhp = false; dc_has_xhp_keyword = false;
   dc_module = None; dc_name = "\\D"; dc_pos = [6:7-8]; dc_tparams = [];
   dc_where_constraints = [];
   dc_substs =
   { "\\C" ->
     { Decl_defs.sc_subst = { "Tc" -> (Rhint ([6:19-20]), Terr) };
       sc_class_context = "\\D"; sc_from_req_extends = false } };
   dc_consts =
   { "class" ->
     { Typing_defs.cc_synthesized = true;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [6:7-8];
       cc_type =
       (Rclass_class ([6:7-8]),
        (Tapply (([6:7-8], "\\HH\\classname"),
           [(Rclass_class ([6:7-8]), Tthis)])));
       cc_origin = "\\D"; cc_refs = [] } };
   dc_typeconsts = {}; dc_props = {}; dc_sprops = {}; dc_methods = {};
   dc_smethods = {}; dc_construct = (None, Typing_defs_core.Inconsistent);
   dc_ancestors =
   { "\\C" ->
     (Rhint ([6:17-21]),
      (Tapply (([6:17-18], "\\C"), [(Rhint ([6:19-20]), Terr)]))) };
   dc_support_dynamic_type = false; dc_req_ancestors = [];
-  dc_req_ancestors_extends = {}; dc_extends = { "\\C" };
-  dc_sealed_whitelist = None; dc_xhp_attr_deps = {}; dc_xhp_enum_values = {};
-  dc_enum_type = None; dc_decl_errors = <opaque> }
+  dc_req_ancestors_extends = {}; dc_extends = {}; dc_sealed_whitelist = None;
+  dc_xhp_attr_deps = {}; dc_xhp_enum_values = {}; dc_enum_type = None;
+  dc_decl_errors = <opaque> }
 { Decl_defs.dc_need_init = false; dc_abstract = false; dc_final = false;
   dc_const = false; dc_internal = false; dc_deferred_init_members = {};
   dc_kind = (Cclass Concrete); dc_is_xhp = false; dc_has_xhp_keyword = false;
   dc_module = None; dc_name = "\\E"; dc_pos = [7:7-8]; dc_tparams = [];
   dc_where_constraints = [];
   dc_substs =
   { "\\C" ->
     { Decl_defs.sc_subst =
       { "Tc" ->
         (Rhint ([7:19-23]),
          (Tapply (([7:19-20], "\\C"), [(Rhint ([7:21-22]), Terr)]))) };
       sc_class_context = "\\E"; sc_from_req_extends = false } };
   dc_consts =
   { "class" ->
     { Typing_defs.cc_synthesized = true;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [7:7-8];
       cc_type =
       (Rclass_class ([7:7-8]),
        (Tapply (([7:7-8], "\\HH\\classname"),
           [(Rclass_class ([7:7-8]), Tthis)])));
       cc_origin = "\\E"; cc_refs = [] } };
   dc_typeconsts = {}; dc_props = {}; dc_sprops = {}; dc_methods = {};
   dc_smethods = {}; dc_construct = (None, Typing_defs_core.Inconsistent);
   dc_ancestors =
   { "\\C" ->
     (Rhint ([7:17-24]),
      (Tapply (([7:17-18], "\\C"),
         [(Rhint ([7:19-23]),
           (Tapply (([7:19-20], "\\C"), [(Rhint ([7:21-22]), Terr)])))]
         ))) };
   dc_support_dynamic_type = false; dc_req_ancestors = [];
-  dc_req_ancestors_extends = {}; dc_extends = { "\\C" };
-  dc_sealed_whitelist = None; dc_xhp_attr_deps = {}; dc_xhp_enum_values = {};
-  dc_enum_type = None; dc_decl_errors = <opaque> }
+  dc_req_ancestors_extends = {}; dc_extends = {}; dc_sealed_whitelist = None;
+  dc_xhp_attr_deps = {}; dc_xhp_enum_values = {}; dc_enum_type = None;
+  dc_decl_errors = <opaque> }
