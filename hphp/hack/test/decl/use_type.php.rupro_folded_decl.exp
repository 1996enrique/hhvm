{ Decl_defs.dc_need_init = false; dc_abstract = false; dc_final = false;
  dc_const = false; dc_internal = false; dc_deferred_init_members = {};
  dc_kind = (Cclass Concrete); dc_is_xhp = false; dc_has_xhp_keyword = false;
  dc_module = None; dc_name = "\\NS\\C"; dc_pos = [7:11-12]; dc_tparams = [];
  dc_where_constraints = []; dc_substs = {};
  dc_consts =
  { "class" ->
    { Typing_defs.cc_synthesized = true;
      cc_abstract = Typing_defs.CCConcrete; cc_pos = [7:11-12];
      cc_type =
      (Rclass_class ([7:11-12]),
       (Tapply (([7:11-12], "\\HH\\classname"),
          [(Rclass_class ([7:11-12]), Tthis)])));
      cc_origin = "\\NS\\C"; cc_refs = [] } };
  dc_typeconsts = {}; dc_props = {}; dc_sprops = {}; dc_methods = {};
  dc_smethods = {}; dc_construct = (None, Typing_defs_core.Inconsistent);
  dc_ancestors = {}; dc_support_dynamic_type = false; dc_req_ancestors = [];
  dc_req_ancestors_extends = {}; dc_extends = {}; dc_sealed_whitelist = None;
  dc_xhp_attr_deps = {}; dc_xhp_enum_values = {}; dc_enum_type = None;
  dc_decl_errors = <opaque> }
{ Decl_defs.dc_need_init = false; dc_abstract = false; dc_final = false;
  dc_const = false; dc_internal = false; dc_deferred_init_members = {};
  dc_kind = (Cclass Concrete); dc_is_xhp = false; dc_has_xhp_keyword = false;
  dc_module = None; dc_name = "\\C\\X"; dc_pos = [10:11-12]; dc_tparams = [];
  dc_where_constraints = []; dc_substs = {};
  dc_consts =
  { "class" ->
    { Typing_defs.cc_synthesized = true;
      cc_abstract = Typing_defs.CCConcrete; cc_pos = [10:11-12];
      cc_type =
      (Rclass_class ([10:11-12]),
       (Tapply (([10:11-12], "\\HH\\classname"),
          [(Rclass_class ([10:11-12]), Tthis)])));
      cc_origin = "\\C\\X"; cc_refs = [] } };
  dc_typeconsts = {}; dc_props = {}; dc_sprops = {}; dc_methods = {};
  dc_smethods = {}; dc_construct = (None, Typing_defs_core.Inconsistent);
  dc_ancestors = {}; dc_support_dynamic_type = false; dc_req_ancestors = [];
  dc_req_ancestors_extends = {}; dc_extends = {}; dc_sealed_whitelist = None;
  dc_xhp_attr_deps = {}; dc_xhp_enum_values = {}; dc_enum_type = None;
  dc_decl_errors = <opaque> }
{ Decl_defs.dc_need_init = false; dc_abstract = false; dc_final = false;
  dc_const = false; dc_internal = false; dc_deferred_init_members = {};
  dc_kind = (Cclass Concrete); dc_is_xhp = false; dc_has_xhp_keyword = false;
  dc_module = None; dc_name = "\\D"; dc_pos = [15:9-10]; dc_tparams = [];
  dc_where_constraints = [];
  dc_substs =
  { "\\NS\\C" ->
    { Decl_defs.sc_subst = {}; sc_class_context = "\\D";
      sc_from_req_extends = false } };
  dc_consts =
  { "class" ->
    { Typing_defs.cc_synthesized = true;
      cc_abstract = Typing_defs.CCConcrete; cc_pos = [15:9-10];
      cc_type =
      (Rclass_class ([15:9-10]),
       (Tapply (([15:9-10], "\\HH\\classname"),
          [(Rclass_class ([15:9-10]), Tthis)])));
      cc_origin = "\\D"; cc_refs = [] } };
  dc_typeconsts = {}; dc_props = {}; dc_sprops = {}; dc_methods = {};
  dc_smethods = {}; dc_construct = (None, Typing_defs_core.Inconsistent);
  dc_ancestors =
  { "\\NS\\C" -> (Rhint ([15:19-20]), (Tapply (([15:19-20], "\\NS\\C"), []))) };
  dc_support_dynamic_type = false; dc_req_ancestors = [];
  dc_req_ancestors_extends = {}; dc_extends = { "\\NS\\C" };
  dc_sealed_whitelist = None; dc_xhp_attr_deps = {}; dc_xhp_enum_values = {};
  dc_enum_type = None; dc_decl_errors = <opaque> }

They matched!
