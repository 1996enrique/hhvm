--- ocaml
+++ rupro
@@ -1,86 +1,85 @@
 { Decl_defs.dc_need_init = false; dc_abstract = false; dc_final = false;
   dc_const = false; dc_internal = false; dc_deferred_init_members = {};
   dc_kind = (Cclass Concrete); dc_is_xhp = false; dc_has_xhp_keyword = false;
   dc_module = None; dc_name = "\\C1"; dc_pos = [4:7-9]; dc_tparams = [];
   dc_where_constraints = []; dc_substs = {};
   dc_consts =
   { "class" ->
     { Typing_defs.cc_synthesized = true;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [4:7-9];
       cc_type =
       (Rclass_class ([4:7-9]),
        (Tapply (([4:7-9], "\\HH\\classname"),
           [(Rclass_class ([4:7-9]), Tthis)])));
       cc_origin = "\\C1"; cc_refs = [] } };
   dc_typeconsts = {}; dc_props = {}; dc_sprops = {}; dc_methods = {};
-  dc_smethods = {};
-  dc_construct = (None, Typing_defs_core.ConsistentConstruct);
+  dc_smethods = {}; dc_construct = (None, Typing_defs_core.Inconsistent);
   dc_ancestors = {}; dc_support_dynamic_type = false; dc_req_ancestors = [];
   dc_req_ancestors_extends = {}; dc_extends = {}; dc_sealed_whitelist = None;
   dc_xhp_attr_deps = {}; dc_xhp_enum_values = {}; dc_enum_type = None;
   dc_decl_errors = <opaque> }
 { Decl_defs.dc_need_init = true; dc_abstract = false; dc_final = false;
   dc_const = false; dc_internal = false; dc_deferred_init_members = {};
   dc_kind = (Cclass Concrete); dc_is_xhp = false; dc_has_xhp_keyword = false;
   dc_module = None; dc_name = "\\C2"; dc_pos = [6:7-9]; dc_tparams = [];
   dc_where_constraints = [];
   dc_substs =
   { "\\C1" ->
     { Decl_defs.sc_subst = {}; sc_class_context = "\\C2";
       sc_from_req_extends = false } };
   dc_consts =
   { "class" ->
     { Typing_defs.cc_synthesized = true;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [6:7-9];
       cc_type =
       (Rclass_class ([6:7-9]),
        (Tapply (([6:7-9], "\\HH\\classname"),
           [(Rclass_class ([6:7-9]), Tthis)])));
       cc_origin = "\\C2"; cc_refs = [] } };
   dc_typeconsts = {}; dc_props = {}; dc_sprops = {}; dc_methods = {};
   dc_smethods = {};
   dc_construct =
   ((Some { Decl_defs.elt_flags =
            { "Abstract" -> false;
              "Const" -> false;
              "Dynamicallycallable" -> false;
              "Final" -> false;
              "Lateinit" -> false;
              "Lsb" -> false;
              "NeedsInit" -> false;
              "ReadonlyProp" -> false;
              "SuperfluousOverride" -> false;
              "SupportDynamicType" -> false;
              "Synthesized" -> false;
              "XaHasDefault" -> false;
              "XaTagLateinit" -> false;
              "XaTagRequired" -> false };
            elt_origin = "\\C2"; elt_visibility = Typing_defs_core.Vpublic;
            elt_deprecated = None }),
-   Typing_defs_core.ConsistentConstruct);
+   Typing_defs_core.Inconsistent);
   dc_ancestors =
   { "\\C1" -> (Rhint ([6:18-20]), (Tapply (([6:18-20], "\\C1"), []))) };
   dc_support_dynamic_type = false; dc_req_ancestors = [];
   dc_req_ancestors_extends = {}; dc_extends = { "\\C1" };
   dc_sealed_whitelist = None; dc_xhp_attr_deps = {}; dc_xhp_enum_values = {};
   dc_enum_type = None; dc_decl_errors = <opaque> }
 { Decl_defs.dc_need_init = false; dc_abstract = false; dc_final = false;
   dc_const = false; dc_internal = false; dc_deferred_init_members = {};
   dc_kind = (Cclass Concrete); dc_is_xhp = false; dc_has_xhp_keyword = false;
   dc_module = None; dc_name = "\\A"; dc_pos = [11:7-8]; dc_tparams = [];
   dc_where_constraints = []; dc_substs = {};
   dc_consts =
   { "class" ->
     { Typing_defs.cc_synthesized = true;
       cc_abstract = Typing_defs.CCConcrete; cc_pos = [11:7-8];
       cc_type =
       (Rclass_class ([11:7-8]),
        (Tapply (([11:7-8], "\\HH\\classname"),
           [(Rclass_class ([11:7-8]), Tthis)])));
       cc_origin = "\\A"; cc_refs = [] } };
   dc_typeconsts = {}; dc_props = {}; dc_sprops = {}; dc_methods = {};
   dc_smethods = {}; dc_construct = (None, Typing_defs_core.Inconsistent);
   dc_ancestors = {}; dc_support_dynamic_type = false; dc_req_ancestors = [];
   dc_req_ancestors_extends = {}; dc_extends = {}; dc_sealed_whitelist = None;
   dc_xhp_attr_deps = {}; dc_xhp_enum_values = {}; dc_enum_type = None;
   dc_decl_errors = <opaque> }
