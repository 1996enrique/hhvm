{ Decl_defs.dc_need_init = false; dc_abstract = false; dc_final = false;
  dc_const = false; dc_internal = false; dc_deferred_init_members = {};
  dc_kind = (Cclass Concrete); dc_is_xhp = false; dc_has_xhp_keyword = false;
  dc_module = None; dc_name = "\\C"; dc_pos = [3:7-8]; dc_tparams = [];
  dc_where_constraints = []; dc_substs = {};
  dc_consts =
  { "DOUBLE" ->
    { Typing_defs.cc_synthesized = false;
      cc_abstract = Typing_defs.CCConcrete; cc_pos = [5:16-22];
      cc_type = (Rhint ([5:9-15]), (Tprim Tstring)); cc_origin = "\\C";
      cc_refs = [] };
    "DOUBLE_ENDS_IN_DOUBLE" ->
    { Typing_defs.cc_synthesized = false;
      cc_abstract = Typing_defs.CCConcrete; cc_pos = [7:16-37];
      cc_type = (Rhint ([7:9-15]), (Tprim Tstring)); cc_origin = "\\C";
      cc_refs = [] };
    "DOUBLE_ESCAPED_BACKSLASH" ->
    { Typing_defs.cc_synthesized = false;
      cc_abstract = Typing_defs.CCConcrete; cc_pos = [9:16-40];
      cc_type = (Rhint ([9:9-15]), (Tprim Tstring)); cc_origin = "\\C";
      cc_refs = [] };
    "DOUBLE_ESCAPED_DOLLAR" ->
    { Typing_defs.cc_synthesized = false;
      cc_abstract = Typing_defs.CCConcrete; cc_pos = [11:16-37];
      cc_type = (Rhint ([11:9-15]), (Tprim Tstring)); cc_origin = "\\C";
      cc_refs = [] };
    "HEREDOC" ->
    { Typing_defs.cc_synthesized = false;
      cc_abstract = Typing_defs.CCConcrete; cc_pos = [12:16-23];
      cc_type = (Rhint ([12:9-15]), (Tprim Tstring)); cc_origin = "\\C";
      cc_refs = [] };
    "NOWDOC" ->
    { Typing_defs.cc_synthesized = false;
      cc_abstract = Typing_defs.CCConcrete; cc_pos = [15:16-22];
      cc_type = (Rhint ([15:9-15]), (Tprim Tstring)); cc_origin = "\\C";
      cc_refs = [] };
    "SINGLE" ->
    { Typing_defs.cc_synthesized = false;
      cc_abstract = Typing_defs.CCConcrete; cc_pos = [4:16-22];
      cc_type = (Rhint ([4:9-15]), (Tprim Tstring)); cc_origin = "\\C";
      cc_refs = [] };
    "SINGLE_ENDS_IN_SINGLE" ->
    { Typing_defs.cc_synthesized = false;
      cc_abstract = Typing_defs.CCConcrete; cc_pos = [6:16-37];
      cc_type = (Rhint ([6:9-15]), (Tprim Tstring)); cc_origin = "\\C";
      cc_refs = [] };
    "SINGLE_ESCAPED_BACKSLASH" ->
    { Typing_defs.cc_synthesized = false;
      cc_abstract = Typing_defs.CCConcrete; cc_pos = [8:16-40];
      cc_type = (Rhint ([8:9-15]), (Tprim Tstring)); cc_origin = "\\C";
      cc_refs = [] };
    "SINGLE_ESCAPED_DOLLAR" ->
    { Typing_defs.cc_synthesized = false;
      cc_abstract = Typing_defs.CCConcrete; cc_pos = [10:16-37];
      cc_type = (Rhint ([10:9-15]), (Tprim Tstring)); cc_origin = "\\C";
      cc_refs = [] };
    "class" ->
    { Typing_defs.cc_synthesized = true;
      cc_abstract = Typing_defs.CCConcrete; cc_pos = [3:7-8];
      cc_type =
      (Rclass_class ([3:7-8]),
       (Tapply (([3:7-8], "\\HH\\classname"),
          [(Rclass_class ([3:7-8]), Tthis)])));
      cc_origin = "\\C"; cc_refs = [] } };
  dc_typeconsts = {}; dc_props = {}; dc_sprops = {}; dc_methods = {};
  dc_smethods = {}; dc_construct = (None, Typing_defs_core.Inconsistent);
  dc_ancestors = {}; dc_support_dynamic_type = false; dc_req_ancestors = [];
  dc_req_ancestors_extends = {}; dc_extends = {}; dc_sealed_whitelist = None;
  dc_xhp_attr_deps = {}; dc_xhp_enum_values = {}; dc_enum_type = None;
  dc_decl_errors = <opaque> }

They matched!
